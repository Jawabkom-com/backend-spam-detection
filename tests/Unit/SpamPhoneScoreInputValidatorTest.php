<?php

namespace Jawabkom\Backend\Module\Spam\Detection\Test\Unit;

use Jawabkom\Backend\Module\Spam\Detection\Exception\RequiredInputsException;
use Jawabkom\Backend\Module\Spam\Detection\Exception\RequiredPhoneException;
use Jawabkom\Backend\Module\Spam\Detection\InputValidator\SpamPhoneScoreInputsValidator;
use Jawabkom\Backend\Module\Spam\Detection\Test\AbstractTestCase;

/**
 * @property SpamPhoneScoreInputsValidator $inputValidator
 */
class SpamPhoneScoreInputValidatorTest extends AbstractTestCase
{
    public function setUp(): void
    {
        $this->inputValidator = new SpamPhoneScoreInputsValidator();
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @throws RequiredPhoneException
     */
    public function test_Validate_WhenCalledWithEmpty_MustThrowRequiredInputsException() {
        $this->expectException(RequiredInputsException::class);
        $inputs = [
            'phone' => '', // required
            'source' => '', // required
            'country_code' => '', // required, valid country code, 2 letters
            'score' => 0,  // 0 - 100
            'tags' => [], // one dimintional array of strings, or empty
        ];

        $this->inputValidator->validate($inputs);
    }

    /**
     * @throws RequiredInputsException
     */
    public function test_Validate_WhenCalledWithEmptyPhone_MustThrowPhoneIsRequiredException() {
        $this->expectException(RequiredPhoneException::class);
        $inputs = [
            'source' => '', // required
            'country_code' => '', // required, valid country code, 2 letters
            'score' => 0,  // 0 - 100
            'tags' => [], // one dimensional array of strings, or empty
        ];

        $this->inputValidator->validate($inputs);

    }
}