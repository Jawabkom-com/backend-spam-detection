<?php

namespace Jawabkom\Backend\Module\Spam\Detection\Test\Unit;

use Jawabkom\Backend\Module\Spam\Detection\Exception\RequiredInputsException;
use Jawabkom\Backend\Module\Spam\Detection\Exception\RequiredPhoneException;
use Jawabkom\Backend\Module\Spam\Detection\InputFilter\SpamPhoneScoreInputsFilter;
use Jawabkom\Backend\Module\Spam\Detection\Library\Phone;
use Jawabkom\Backend\Module\Spam\Detection\Test\AbstractTestCase;

/**
 * @property SpamPhoneScoreInputsFilter $filterService
 */
class SpamPhoneScoreInputFilterTest extends AbstractTestCase
{

    public function setUp(): void
    {
        $this->phoneLib = new Phone();
        $this->filterService = new SpamPhoneScoreInputsFilter($this->phoneLib);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

//    public function test_Filter_WhenCalledWithPhone_MustFilterToAProperFormat()
//    {
//        $inputs = [
//            'phone' => '+970599189357',
//            'country_code'=> ''
//        ];
//        $filteredInputs = $this->filterService->filter($inputs);
//        $this->assertEquals($filteredInputs['normalizedPhone']['phone'], $inputs['phone']);
//        $this->assertTrue($filteredInputs['normalizedPhone']['is_valid']);
//        $this->assertEquals('PS', $filteredInputs['normalizedPhone']['country_code']);
//    }
//
//    public function test_Filter_WhenCalledWithZeroPrefixPhone_MustFilterToAProperFormat()
//    {
//        $inputs = [
//            'phone' => '00970599189357',
//            'country_code' => ''
//        ];
//        $filteredInputs = $this->filterService->filter($inputs);
//        $this->assertEquals('+970599189357', $filteredInputs['normalizedPhone']['phone']);
//        $this->assertTrue($filteredInputs['normalizedPhone']['is_valid']);
//        $this->assertEquals('PS', $filteredInputs['normalizedPhone']['country_code']);
//    }
//
//    public function test_Filter_WhenCalledWithCountryCodeAndNoPrefixPhone_MustFilterToAProperFormat()
//    {
//        $inputs = [
//            'phone' => '0599189357',
//            'country_code' => 'PS'
//        ];
//        $filteredInputs = $this->filterService->filter($inputs);
//        $this->assertEquals('+970599189357', $filteredInputs['normalizedPhone']['phone']);
//        $this->assertTrue($filteredInputs['normalizedPhone']['is_valid']);
//        $this->assertEquals('PS', $filteredInputs['normalizedPhone']['country_code']);
//    }
//
//    public function test_Filter_WhenCalledWithCountryCode_ShouldReturnsTwoLetters()
//    {
//        $inputs = [
//            'phone' => '+970599189357',
//            'country_code' => 'Palestine'
//        ];
//
//        $filteredInputs = $this->filterService->filter($inputs);
//        $this->assertEquals(2, strlen($filteredInputs['normalizedPhone']['country_code']));
//    }
}